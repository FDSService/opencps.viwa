/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.duongthuy.tichhop.api.dao.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.duongthuy.tichhop.api.dao.model.MessageFunctionData;
import org.duongthuy.tichhop.api.dao.model.MessageFunctionDataModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the MessageFunctionData service. Represents a row in the &quot;duongthuy_message_packages&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.duongthuy.tichhop.api.dao.model.MessageFunctionDataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MessageFunctionDataImpl}.
 * </p>
 *
 * @author binhth
 * @see MessageFunctionDataImpl
 * @see org.duongthuy.tichhop.api.dao.model.MessageFunctionData
 * @see org.duongthuy.tichhop.api.dao.model.MessageFunctionDataModel
 * @generated
 */
public class MessageFunctionDataModelImpl extends BaseModelImpl<MessageFunctionData>
	implements MessageFunctionDataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a message function data model instance should use the {@link org.duongthuy.tichhop.api.dao.model.MessageFunctionData} interface instead.
	 */
	public static final String TABLE_NAME = "duongthuy_message_packages";
	public static final Object[][] TABLE_COLUMNS = {
			{ "messagePackagesId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "messageFunction", Types.VARCHAR },
			{ "messageId", Types.VARCHAR },
			{ "messageFileIdData", Types.VARCHAR },
			{ "sendDate", Types.TIMESTAMP },
			{ "version", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table duongthuy_message_packages (messagePackagesId LONG not null primary key,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,messageFunction VARCHAR(128) null,messageId VARCHAR(128) null,messageFileIdData VARCHAR(512) null,sendDate DATE null,version VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table duongthuy_message_packages";
	public static final String ORDER_BY_JPQL = " ORDER BY messageFunctionData.messageFunction ASC";
	public static final String ORDER_BY_SQL = " ORDER BY duongthuy_message_packages.messageFunction ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.duongthuy.tichhop.api.dao.model.MessageFunctionData"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.duongthuy.tichhop.api.dao.model.MessageFunctionData"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.duongthuy.tichhop.api.dao.model.MessageFunctionData"),
			true);
	public static long MESSAGEFUNCTION_COLUMN_BITMASK = 1L;
	public static long MESSAGEID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.duongthuy.tichhop.api.dao.model.MessageFunctionData"));

	public MessageFunctionDataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _messagePackagesId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMessagePackagesId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _messagePackagesId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MessageFunctionData.class;
	}

	@Override
	public String getModelClassName() {
		return MessageFunctionData.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("messagePackagesId", getMessagePackagesId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("messageFunction", getMessageFunction());
		attributes.put("messageId", getMessageId());
		attributes.put("messageFileIdData", getMessageFileIdData());
		attributes.put("sendDate", getSendDate());
		attributes.put("version", getVersion());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long messagePackagesId = (Long)attributes.get("messagePackagesId");

		if (messagePackagesId != null) {
			setMessagePackagesId(messagePackagesId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String messageFunction = (String)attributes.get("messageFunction");

		if (messageFunction != null) {
			setMessageFunction(messageFunction);
		}

		String messageId = (String)attributes.get("messageId");

		if (messageId != null) {
			setMessageId(messageId);
		}

		String messageFileIdData = (String)attributes.get("messageFileIdData");

		if (messageFileIdData != null) {
			setMessageFileIdData(messageFileIdData);
		}

		Date sendDate = (Date)attributes.get("sendDate");

		if (sendDate != null) {
			setSendDate(sendDate);
		}

		String version = (String)attributes.get("version");

		if (version != null) {
			setVersion(version);
		}
	}

	@Override
	public long getMessagePackagesId() {
		return _messagePackagesId;
	}

	@Override
	public void setMessagePackagesId(long messagePackagesId) {
		_messagePackagesId = messagePackagesId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getMessageFunction() {
		if (_messageFunction == null) {
			return StringPool.BLANK;
		}
		else {
			return _messageFunction;
		}
	}

	@Override
	public void setMessageFunction(String messageFunction) {
		_columnBitmask = -1L;

		if (_originalMessageFunction == null) {
			_originalMessageFunction = _messageFunction;
		}

		_messageFunction = messageFunction;
	}

	public String getOriginalMessageFunction() {
		return GetterUtil.getString(_originalMessageFunction);
	}

	@Override
	public String getMessageId() {
		if (_messageId == null) {
			return StringPool.BLANK;
		}
		else {
			return _messageId;
		}
	}

	@Override
	public void setMessageId(String messageId) {
		_columnBitmask |= MESSAGEID_COLUMN_BITMASK;

		if (_originalMessageId == null) {
			_originalMessageId = _messageId;
		}

		_messageId = messageId;
	}

	public String getOriginalMessageId() {
		return GetterUtil.getString(_originalMessageId);
	}

	@Override
	public String getMessageFileIdData() {
		if (_messageFileIdData == null) {
			return StringPool.BLANK;
		}
		else {
			return _messageFileIdData;
		}
	}

	@Override
	public void setMessageFileIdData(String messageFileIdData) {
		_messageFileIdData = messageFileIdData;
	}

	@Override
	public Date getSendDate() {
		return _sendDate;
	}

	@Override
	public void setSendDate(Date sendDate) {
		_sendDate = sendDate;
	}

	@Override
	public String getVersion() {
		if (_version == null) {
			return StringPool.BLANK;
		}
		else {
			return _version;
		}
	}

	@Override
	public void setVersion(String version) {
		_version = version;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			MessageFunctionData.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MessageFunctionData toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MessageFunctionData)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MessageFunctionDataImpl messageFunctionDataImpl = new MessageFunctionDataImpl();

		messageFunctionDataImpl.setMessagePackagesId(getMessagePackagesId());
		messageFunctionDataImpl.setUserId(getUserId());
		messageFunctionDataImpl.setUserName(getUserName());
		messageFunctionDataImpl.setCreateDate(getCreateDate());
		messageFunctionDataImpl.setModifiedDate(getModifiedDate());
		messageFunctionDataImpl.setMessageFunction(getMessageFunction());
		messageFunctionDataImpl.setMessageId(getMessageId());
		messageFunctionDataImpl.setMessageFileIdData(getMessageFileIdData());
		messageFunctionDataImpl.setSendDate(getSendDate());
		messageFunctionDataImpl.setVersion(getVersion());

		messageFunctionDataImpl.resetOriginalValues();

		return messageFunctionDataImpl;
	}

	@Override
	public int compareTo(MessageFunctionData messageFunctionData) {
		int value = 0;

		value = getMessageFunction()
					.compareTo(messageFunctionData.getMessageFunction());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MessageFunctionData)) {
			return false;
		}

		MessageFunctionData messageFunctionData = (MessageFunctionData)obj;

		long primaryKey = messageFunctionData.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		MessageFunctionDataModelImpl messageFunctionDataModelImpl = this;

		messageFunctionDataModelImpl._originalMessageFunction = messageFunctionDataModelImpl._messageFunction;

		messageFunctionDataModelImpl._originalMessageId = messageFunctionDataModelImpl._messageId;

		messageFunctionDataModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MessageFunctionData> toCacheModel() {
		MessageFunctionDataCacheModel messageFunctionDataCacheModel = new MessageFunctionDataCacheModel();

		messageFunctionDataCacheModel.messagePackagesId = getMessagePackagesId();

		messageFunctionDataCacheModel.userId = getUserId();

		messageFunctionDataCacheModel.userName = getUserName();

		String userName = messageFunctionDataCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			messageFunctionDataCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			messageFunctionDataCacheModel.createDate = createDate.getTime();
		}
		else {
			messageFunctionDataCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			messageFunctionDataCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			messageFunctionDataCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		messageFunctionDataCacheModel.messageFunction = getMessageFunction();

		String messageFunction = messageFunctionDataCacheModel.messageFunction;

		if ((messageFunction != null) && (messageFunction.length() == 0)) {
			messageFunctionDataCacheModel.messageFunction = null;
		}

		messageFunctionDataCacheModel.messageId = getMessageId();

		String messageId = messageFunctionDataCacheModel.messageId;

		if ((messageId != null) && (messageId.length() == 0)) {
			messageFunctionDataCacheModel.messageId = null;
		}

		messageFunctionDataCacheModel.messageFileIdData = getMessageFileIdData();

		String messageFileIdData = messageFunctionDataCacheModel.messageFileIdData;

		if ((messageFileIdData != null) && (messageFileIdData.length() == 0)) {
			messageFunctionDataCacheModel.messageFileIdData = null;
		}

		Date sendDate = getSendDate();

		if (sendDate != null) {
			messageFunctionDataCacheModel.sendDate = sendDate.getTime();
		}
		else {
			messageFunctionDataCacheModel.sendDate = Long.MIN_VALUE;
		}

		messageFunctionDataCacheModel.version = getVersion();

		String version = messageFunctionDataCacheModel.version;

		if ((version != null) && (version.length() == 0)) {
			messageFunctionDataCacheModel.version = null;
		}

		return messageFunctionDataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{messagePackagesId=");
		sb.append(getMessagePackagesId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", messageFunction=");
		sb.append(getMessageFunction());
		sb.append(", messageId=");
		sb.append(getMessageId());
		sb.append(", messageFileIdData=");
		sb.append(getMessageFileIdData());
		sb.append(", sendDate=");
		sb.append(getSendDate());
		sb.append(", version=");
		sb.append(getVersion());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("org.duongthuy.tichhop.api.dao.model.MessageFunctionData");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>messagePackagesId</column-name><column-value><![CDATA[");
		sb.append(getMessagePackagesId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>messageFunction</column-name><column-value><![CDATA[");
		sb.append(getMessageFunction());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>messageId</column-name><column-value><![CDATA[");
		sb.append(getMessageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>messageFileIdData</column-name><column-value><![CDATA[");
		sb.append(getMessageFileIdData());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sendDate</column-name><column-value><![CDATA[");
		sb.append(getSendDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>version</column-name><column-value><![CDATA[");
		sb.append(getVersion());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MessageFunctionData.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			MessageFunctionData.class
		};
	private long _messagePackagesId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _messageFunction;
	private String _originalMessageFunction;
	private String _messageId;
	private String _originalMessageId;
	private String _messageFileIdData;
	private Date _sendDate;
	private String _version;
	private long _columnBitmask;
	private MessageFunctionData _escapedModel;
}